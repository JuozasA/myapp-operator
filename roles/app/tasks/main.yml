---
# tasks file for nodeapp
- name: Create app Secret with mongo credentials
  community.kubernetes.k8s:
    definition:
      kind: Secret
      apiVersion: v1
      metadata:
        name: '{{meta.name}}'
        namespace: '{{meta.namespace}}'
      stringData:
        database-password: '{{dbpassword}}'
        database-admin-password : '{{dbadminpasswd}}'

- name: Create OperatorGroup for node.js namespace
  community.kubernetes.k8s:
    definition:
      apiVersion: operators.coreos.com/v1
      kind: OperatorGroup
      metadata:
        name: '{{ meta.name }}'
        namespace: '{{ meta.namespace }}'
      spec:
        targetNamespaces:
          - '{{ meta.namespace }}'

- name: Subscribe to AMQ Operator
  community.kubernetes.k8s:
    definition:
      apiVersion: operators.coreos.com/v1alpha1
      kind: Subscription
      metadata:
        name: amq-broker
        namespace: '{{meta.namespace}}'
      spec:
        channel: current-76
        installPlanApproval: Automatic
        name: amq-broker
        source: redhat-operators
        sourceNamespace: openshift-marketplace
        startingCSV: amq-broker-operator.v0.13.0

- name: Create Node Service
  community.kubernetes.k8s:
    definition:
      kind: Service
      apiVersion: v1
      metadata:
        name: '{{meta.name}}'
        namespace: '{{meta.namespace}}'
        annotations:
          description: 'Exposes and load balances the application pods'
          service.alpha.openshift.io/dependencies: |
            name: 'mongodb'
            kind: 'Service'
      spec:
        ports:
        - name: web
          port: 8080
          targetPort: 8080
        selector:
          app: '{{meta.name}}'
#Ingress
- name: Create Ingress Route
  community.kubernetes.k8s:
    definition:
      kind: Route
      apiVersion: v1
      metadata:
        name: '{{meta.name}}'
        namespace: '{{meta.namespace}}'
      spec:
        host: '{{weburl}}'
        to:
          kind: Service
          name: '{{meta.name}}'

- name: Start app Deployment
  community.kubernetes.k8s:
    definition:
      kind: Deployment
      apiVersion: v1
      metadata:
        name: '{{meta.name}}'
        namespace: '{{meta.namespace}}'
        annotations:
          description: 'Defines how to deploy the application server'
          template.alpha.openshift.io/wait-for-ready: 'true'
      spec:
        replicas: '{{size}}'
        selector:
          matchLabels:
            app: '{{meta.name}}'
        template:
          metadata:
            labels:
              app: '{{meta.name}}'
          spec:
            containers:
              - name: nodejs-mongodb
                image: '{{image}}'
                ports:
                  - containerPort: 8080
                env:
                  - name: DATABASE_SERVICE_NAME
                    value: 'mongodb'
                  - name: MONGODB_USER
                    value: '{{dbuser}}'
                  - name: MONGODB_PASSWORD
                    valueFrom:
                      secretKeyRef :
                        name : '{{meta.name}}'
                        key : database-password
                  - name: MONGODB_DATABASE
                    value: '{{dbname}}'
                  - name: MONGODB_ADMIN_PASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: '{{meta.name}}'
                        key: database-admin-password
                readinessProbe:
                  timeoutSeconds: 3
                  initialDelaySeconds: 3
                  httpGet:
                    path: /
                    port: 8080
                livenessProbe:
                  timeoutSeconds: 3
                  initialDelaySeconds: 30
                  httpGet:
                    path: /
                    port: 8080
                resources:
                  limits:
                    memory: 3Gi

- name: Deploy Amq Artemis instance
  community.kubernetes.k8s:
    definition:
      apiVersion: broker.amq.io/v2alpha2
      kind: ActiveMQArtemis
      metadata:
        name: '{{ artemisName }}'
        namespace: '{{ meta.namespace }}'
      spec:
        deploymentPlan:
          size: 1
          image: registry.redhat.io/amq7/amq-broker:7.4